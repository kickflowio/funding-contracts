parameter (or (or (pair %contribute (address %from_) (pair (address %entry_address) (pair (bytes %token_identifier) (nat %value)))) (or (list %disqualify_entries nat) (address %enter_round))) (or (or (map %set_clr_matches nat nat) (nat %sponsor)) (or (address %withdraw_deposit) (address %withdraw_match))));
storage   (pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%contribute
            # == contribute ==
            # sp.verify(sp.sender == self.data.round_meta.donation_handler_address, 'NOT_ALLOWED') # @storage : @parameter%contribute
            DUP;        # @storage : @storage : @parameter%contribute
            DUG 2;      # @storage : @parameter%contribute : @storage
            GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%contribute : @storage
            GET 9;      # address : @parameter%contribute : @storage
            SENDER;     # @sender : address : @parameter%contribute : @storage
            COMPARE;    # int : @parameter%contribute : @storage
            EQ;         # bool : @parameter%contribute : @storage
            IF
              {}
              {
                PUSH string "NOT_ALLOWED"; # string : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }; # @parameter%contribute : @storage
            SWAP;       # @storage : @parameter%contribute
            # sp.verify(self.data.entry_address_to_id.contains(params.entry_address), 'INVALID_ENTRY_ADDRESS') # @storage : @parameter%contribute
            DUP;        # @storage : @storage : @parameter%contribute
            DUG 2;      # @storage : @parameter%contribute : @storage
            CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%contribute : @storage
            GET 5;      # big_map address nat : @parameter%contribute : @storage
            SWAP;       # @parameter%contribute : big_map address nat : @storage
            DUP;        # @parameter%contribute : @parameter%contribute : big_map address nat : @storage
            DUG 2;      # @parameter%contribute : big_map address nat : @parameter%contribute : @storage
            GET 3;      # address : big_map address nat : @parameter%contribute : @storage
            MEM;        # bool : @parameter%contribute : @storage
            IF
              {}
              {
                PUSH string "INVALID_ENTRY_ADDRESS"; # string : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }; # @parameter%contribute : @storage
            SWAP;       # @storage : @parameter%contribute
            # sp.verify((sp.now >= self.data.round_event_timestamps.contribution_start) & (sp.now < self.data.round_event_timestamps.contribution_end), 'NOT_ACCEPTING_CONTRIBUTIONS') # @storage : @parameter%contribute
            DUP;        # @storage : @storage : @parameter%contribute
            DUG 2;      # @storage : @parameter%contribute : @storage
            GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%contribute : @storage
            CAR;        # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : @parameter%contribute : @storage
            CAR;        # timestamp : @parameter%contribute : @storage
            NOW;        # @now : timestamp : @parameter%contribute : @storage
            COMPARE;    # int : @parameter%contribute : @storage
            GE;         # bool : @parameter%contribute : @storage
            IF
              {
                SWAP;       # @storage : @parameter%contribute
                DUP;        # @storage : @storage : @parameter%contribute
                DUG 2;      # @storage : @parameter%contribute : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%contribute : @storage
                CAR;        # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : @parameter%contribute : @storage
                GET 3;      # timestamp : @parameter%contribute : @storage
                NOW;        # @now : timestamp : @parameter%contribute : @storage
                COMPARE;    # int : @parameter%contribute : @storage
                LT;         # bool : @parameter%contribute : @storage
              }
              {
                PUSH bool False; # bool : @parameter%contribute : @storage
              }; # bool : @parameter%contribute : @storage
            IF
              {}
              {
                PUSH string "NOT_ACCEPTING_CONTRIBUTIONS"; # string : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }; # @parameter%contribute : @storage
            # sp.verify(self.data.entries[self.data.entry_address_to_id[params.entry_address]].status == 0, 'ENTRY_NOT_ACTIVE') # @parameter%contribute : @storage
            PUSH nat 0; # nat : @parameter%contribute : @storage
            DIG 2;      # @storage : nat : @parameter%contribute
            DUP;        # @storage : @storage : nat : @parameter%contribute
            CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : nat : @parameter%contribute
            GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : nat : @parameter%contribute
            SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute
            DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute
            DUG 4;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
            CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
            GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
            DUP 4;      # @parameter%contribute : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
            GET 3;      # address : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
            GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
            IF_NONE
              {
                PUSH int 222; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:222 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
              }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
            GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%contribute : @storage
            IF_NONE
              {
                PUSH int 223; # int : nat : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:223 # @some : nat : @parameter%contribute : @storage
              }; # @some : nat : @parameter%contribute : @storage
            GET 5;      # nat : nat : @parameter%contribute : @storage
            COMPARE;    # int : @parameter%contribute : @storage
            EQ;         # bool : @parameter%contribute : @storage
            IF
              {}
              {
                PUSH string "ENTRY_NOT_ACTIVE"; # string : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }; # @parameter%contribute : @storage
            SWAP;       # @storage : @parameter%contribute
            # sp.verify(~ (self.data.contributions.contains((params.from_, self.data.entry_address_to_id[params.entry_address]))), 'ALREADY_CONTRBUTED') # @storage : @parameter%contribute
            DUP;        # @storage : @storage : @parameter%contribute
            CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : @parameter%contribute
            CAR;        # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : @storage : @parameter%contribute
            CDR;        # big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @storage : @parameter%contribute
            SWAP;       # @storage : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute
            DUP;        # @storage : @storage : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute
            DUG 3;      # @storage : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            GET 5;      # big_map address nat : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            DUP 3;      # @parameter%contribute : big_map address nat : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            GET 3;      # address : big_map address nat : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            GET;        # option nat : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            IF_NONE
              {
                PUSH int 222; # int : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:222 # @some : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
              }; # @some : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            DUP 3;      # @parameter%contribute : @some : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            CAR;        # address : @some : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            PAIR;       # pair address @some : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : @parameter%contribute : @storage
            MEM;        # bool : @parameter%contribute : @storage
            IF
              {
                PUSH string "ALREADY_CONTRBUTED"; # string : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }
              {}; # @parameter%contribute : @storage
            SWAP;       # @storage : @parameter%contribute
            # sp.verify((params.from_ != self.data.entries[self.data.entry_address_to_id[params.entry_address]].address) & (params.from_ != self.data.entries[self.data.entry_address_to_id[params.entry_address]].creator), 'SELF_CONTRIBUTION_NOT_ALLOWED') # @storage : @parameter%contribute
            DUP;        # @storage : @storage : @parameter%contribute
            CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : @parameter%contribute
            GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : @parameter%contribute
            SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute
            DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute
            DUG 3;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
            CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
            GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
            DUP 3;      # @parameter%contribute : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
            GET 3;      # address : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
            GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
            IF_NONE
              {
                PUSH int 222; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:222 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
              }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
            GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
            IF_NONE
              {
                PUSH int 223; # int : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:223 # @some : @parameter%contribute : @storage
              }; # @some : @parameter%contribute : @storage
            CAR;        # address : @parameter%contribute : @storage
            SWAP;       # @parameter%contribute : address : @storage
            DUP;        # @parameter%contribute : @parameter%contribute : address : @storage
            DUG 2;      # @parameter%contribute : address : @parameter%contribute : @storage
            CAR;        # address : address : @parameter%contribute : @storage
            COMPARE;    # int : @parameter%contribute : @storage
            NEQ;        # bool : @parameter%contribute : @storage
            IF
              {
                SWAP;       # @storage : @parameter%contribute
                DUP;        # @storage : @storage : @parameter%contribute
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : @parameter%contribute
                GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : @parameter%contribute
                SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute
                DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute
                DUG 3;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                DUP 3;      # @parameter%contribute : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                GET 3;      # address : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                IF_NONE
                  {
                    PUSH int 222; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:222 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%contribute : @storage
                IF_NONE
                  {
                    PUSH int 223; # int : @parameter%contribute : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:223 # @some : @parameter%contribute : @storage
                  }; # @some : @parameter%contribute : @storage
                GET 3;      # address : @parameter%contribute : @storage
                SWAP;       # @parameter%contribute : address : @storage
                DUP;        # @parameter%contribute : @parameter%contribute : address : @storage
                DUG 2;      # @parameter%contribute : address : @parameter%contribute : @storage
                CAR;        # address : address : @parameter%contribute : @storage
                COMPARE;    # int : @parameter%contribute : @storage
                NEQ;        # bool : @parameter%contribute : @storage
              }
              {
                PUSH bool False; # bool : @parameter%contribute : @storage
              }; # bool : @parameter%contribute : @storage
            IF
              {}
              {
                PUSH string "SELF_CONTRIBUTION_NOT_ALLOWED"; # string : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }; # @parameter%contribute : @storage
            SWAP;       # @storage : @parameter%contribute
            # sp.verify(self.data.round_meta.token_set.contains(params.token_identifier), 'INVALID_TOKEN_IDENTIFIER') # @storage : @parameter%contribute
            DUP;        # @storage : @storage : @parameter%contribute
            DUG 2;      # @storage : @parameter%contribute : @storage
            GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%contribute : @storage
            GET 3;      # set bytes : @parameter%contribute : @storage
            SWAP;       # @parameter%contribute : set bytes : @storage
            DUP;        # @parameter%contribute : @parameter%contribute : set bytes : @storage
            DUG 2;      # @parameter%contribute : set bytes : @parameter%contribute : @storage
            GET 5;      # bytes : set bytes : @parameter%contribute : @storage
            MEM;        # bool : @parameter%contribute : @storage
            IF
              {}
              {
                PUSH string "INVALID_TOKEN_IDENTIFIER"; # string : @parameter%contribute : @storage
                FAILWITH;   # FAILED
              }; # @parameter%contribute : @storage
            SWAP;       # @storage : @parameter%contribute
            # self.data.contributions[(params.from_, self.data.entry_address_to_id[params.entry_address])] = sp.record(token_identifier = params.token_identifier, value = params.value) # @storage : @parameter%contribute
            DUP;        # @storage : @storage : @parameter%contribute
            DUG 2;      # @storage : @parameter%contribute : @storage
            UNPAIR;     # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute : @storage
            UNPAIR;     # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute : @storage
            UNPAIR;     # address : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute : @storage
            SWAP;       # big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute : @storage
            DIG 4;      # @parameter%contribute : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @storage
            DUP;        # @parameter%contribute : @parameter%contribute : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @storage
            GET 6;      # nat : @parameter%contribute : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @storage
            SWAP;       # @parameter%contribute : nat : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @storage
            DUP;        # @parameter%contribute : @parameter%contribute : nat : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @storage
            DUG 6;      # @parameter%contribute : nat : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute : @storage
            GET 5;      # bytes : nat : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute : @storage
            PAIR;       # pair bytes nat : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute : @storage
            SOME;       # option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute : @storage
            DIG 6;      # @storage : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute
            CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute
            GET 5;      # big_map address nat : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute
            DUP 7;      # @parameter%contribute : big_map address nat : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute
            GET 3;      # address : big_map address nat : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute
            GET;        # option nat : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute
            IF_NONE
              {
                PUSH int 222; # int : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:222 # @some : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute
              }; # @some : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%contribute
            DIG 6;      # @parameter%contribute : @some : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
            CAR;        # address : @some : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
            PAIR;       # pair address @some : option (pair bytes nat) : big_map (pair address nat) (pair (bytes %token_identifier) (nat %value)) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
            UPDATE;     # big_map (pair address nat) (pair bytes nat) : address : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
            SWAP;       # address : big_map (pair address nat) (pair bytes nat) : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
            PAIR;       # pair address (big_map (pair address nat) (pair bytes nat)) : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
            PAIR;       # pair (pair address (big_map (pair address nat) (pair bytes nat))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
            PAIR;       # pair (pair (pair address (big_map (pair address nat) (pair bytes nat))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
            NIL operation; # list operation : pair (pair (pair address (big_map (pair address nat) (pair bytes nat))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%disqualify_entries
                # == disqualify_entries ==
                # sp.verify(sp.sender == self.data.admin, 'NOT_ALLOWED') # @storage : @parameter%disqualify_entries
                DUP;        # @storage : @storage : @parameter%disqualify_entries
                DUG 2;      # @storage : @parameter%disqualify_entries : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%disqualify_entries : @storage
                CAR;        # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : @parameter%disqualify_entries : @storage
                CAR;        # address : @parameter%disqualify_entries : @storage
                SENDER;     # @sender : address : @parameter%disqualify_entries : @storage
                COMPARE;    # int : @parameter%disqualify_entries : @storage
                EQ;         # bool : @parameter%disqualify_entries : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : @parameter%disqualify_entries : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%disqualify_entries : @storage
                SWAP;       # @storage : @parameter%disqualify_entries
                # sp.verify(sp.now < self.data.round_event_timestamps.cooldown_period_end, 'COOLDOWN_PERIOD_OVER') # @storage : @parameter%disqualify_entries
                DUP;        # @storage : @storage : @parameter%disqualify_entries
                DUG 2;      # @storage : @parameter%disqualify_entries : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%disqualify_entries : @storage
                CAR;        # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : @parameter%disqualify_entries : @storage
                GET 5;      # timestamp : @parameter%disqualify_entries : @storage
                NOW;        # @now : timestamp : @parameter%disqualify_entries : @storage
                COMPARE;    # int : @parameter%disqualify_entries : @storage
                LT;         # bool : @parameter%disqualify_entries : @storage
                IF
                  {}
                  {
                    PUSH string "COOLDOWN_PERIOD_OVER"; # string : @parameter%disqualify_entries : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%disqualify_entries : @storage
                # for entry_id in params: ... # @parameter%disqualify_entries : @storage
                DUP;        # @parameter%disqualify_entries : @parameter%disqualify_entries : @storage
                ITER
                  {
                    # if self.data.entries[entry_id].status == 1: # nat : @parameter%disqualify_entries : @storage
                    PUSH nat 1; # nat : nat : @parameter%disqualify_entries : @storage
                    DUP 4;      # @storage : nat : nat : @parameter%disqualify_entries : @storage
                    CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : nat : nat : @parameter%disqualify_entries : @storage
                    GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : nat : @parameter%disqualify_entries : @storage
                    DUP 3;      # nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : nat : @parameter%disqualify_entries : @storage
                    GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : nat : @parameter%disqualify_entries : @storage
                    IF_NONE
                      {
                        PUSH int 266; # int : nat : nat : @parameter%disqualify_entries : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:266 # @some : nat : nat : @parameter%disqualify_entries : @storage
                      }; # @some : nat : nat : @parameter%disqualify_entries : @storage
                    GET 5;      # nat : nat : nat : @parameter%disqualify_entries : @storage
                    COMPARE;    # int : nat : @parameter%disqualify_entries : @storage
                    EQ;         # bool : nat : @parameter%disqualify_entries : @storage
                    IF
                      {
                        PUSH string "ENTRY_ALREADY_DISQUALIFIED"; # string : nat : @parameter%disqualify_entries : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # nat : @parameter%disqualify_entries : @storage
                    # self.data.entries[entry_id].status = 1 # nat : @parameter%disqualify_entries : @storage
                    DIG 2;      # @storage : nat : @parameter%disqualify_entries
                    UNPAIR;     # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%disqualify_entries
                    UNPAIR;     # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%disqualify_entries
                    SWAP;       # pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%disqualify_entries
                    UNPAIR;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%disqualify_entries
                    DUP;        # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%disqualify_entries
                    DIG 5;      # nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    DUP;        # nat : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    DUG 2;      # nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    IF_NONE
                      {
                        PUSH int 268; # int : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    PUSH nat 1; # nat : @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    UPDATE 5;   # @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    SOME;       # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    SWAP;       # nat : option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    UPDATE;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    PAIR;       # pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    SWAP;       # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    PAIR;       # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%disqualify_entries
                    PAIR;       # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%disqualify_entries
                    SWAP;       # @parameter%disqualify_entries : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                  }; # @parameter%disqualify_entries : @storage
                # sp.send(self.data.round_meta.community_fund_address, sp.mul(sp.fst(sp.ediv(self.data.round_meta.security_deposit_amount, sp.mutez(1)).open_some(message = sp.unit)) * sp.len(params), sp.mutez(1))) # @parameter%disqualify_entries : @storage
                NIL operation; # list operation : @parameter%disqualify_entries : @storage
                DUP 3;      # @storage : list operation : @parameter%disqualify_entries : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : list operation : @parameter%disqualify_entries : @storage
                GET 10;     # address : list operation : @parameter%disqualify_entries : @storage
                CONTRACT unit; # option (contract unit) : list operation : @parameter%disqualify_entries : @storage
                IF_NONE
                  {
                    PUSH int 272; # int : list operation : @parameter%disqualify_entries : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%disqualify_entries : @storage
                PUSH mutez 1; # mutez : @some : list operation : @parameter%disqualify_entries : @storage
                DIG 3;      # @parameter%disqualify_entries : mutez : @some : list operation : @storage
                SIZE;       # nat : mutez : @some : list operation : @storage
                PUSH mutez 1; # mutez : nat : mutez : @some : list operation : @storage
                DUP 6;      # @storage : mutez : nat : mutez : @some : list operation : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : mutez : nat : mutez : @some : list operation : @storage
                GET 5;      # mutez : mutez : nat : mutez : @some : list operation : @storage
                EDIV;       # option (pair nat mutez) : nat : mutez : @some : list operation : @storage
                IF_NONE
                  {
                    UNIT;       # unit : nat : mutez : @some : list operation : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : mutez : @some : list operation : @storage
                CAR;        # nat : nat : mutez : @some : list operation : @storage
                MUL;        # nat : mutez : @some : list operation : @storage
                MUL;        # mutez : @some : list operation : @storage
                UNIT;       # unit : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%enter_round
                # == enter_round ==
                # sp.verify(~ (self.data.entry_address_to_id.contains(params)), 'ALREADY_IN_ROUND') # @storage : @parameter%enter_round
                DUP;        # @storage : @storage : @parameter%enter_round
                DUG 2;      # @storage : @parameter%enter_round : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%enter_round : @storage
                GET 5;      # big_map address nat : @parameter%enter_round : @storage
                SWAP;       # @parameter%enter_round : big_map address nat : @storage
                DUP;        # @parameter%enter_round : @parameter%enter_round : big_map address nat : @storage
                DUG 2;      # @parameter%enter_round : big_map address nat : @parameter%enter_round : @storage
                MEM;        # bool : @parameter%enter_round : @storage
                IF
                  {
                    PUSH string "ALREADY_IN_ROUND"; # string : @parameter%enter_round : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%enter_round : @storage
                SWAP;       # @storage : @parameter%enter_round
                # sp.verify(sp.now < self.data.round_event_timestamps.contribution_start, 'ENTRY_PERIOD_OVER') # @storage : @parameter%enter_round
                DUP;        # @storage : @storage : @parameter%enter_round
                DUG 2;      # @storage : @parameter%enter_round : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%enter_round : @storage
                CAR;        # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : @parameter%enter_round : @storage
                CAR;        # timestamp : @parameter%enter_round : @storage
                NOW;        # @now : timestamp : @parameter%enter_round : @storage
                COMPARE;    # int : @parameter%enter_round : @storage
                LT;         # bool : @parameter%enter_round : @storage
                IF
                  {}
                  {
                    PUSH string "ENTRY_PERIOD_OVER"; # string : @parameter%enter_round : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%enter_round : @storage
                SWAP;       # @storage : @parameter%enter_round
                # sp.verify(sp.amount == self.data.round_meta.security_deposit_amount, 'INVALID_SECURITY_DEPOSIT') # @storage : @parameter%enter_round
                DUP;        # @storage : @storage : @parameter%enter_round
                DUG 2;      # @storage : @parameter%enter_round : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%enter_round : @storage
                GET 5;      # mutez : @parameter%enter_round : @storage
                AMOUNT;     # @amount : mutez : @parameter%enter_round : @storage
                COMPARE;    # int : @parameter%enter_round : @storage
                EQ;         # bool : @parameter%enter_round : @storage
                IF
                  {}
                  {
                    PUSH string "INVALID_SECURITY_DEPOSIT"; # string : @parameter%enter_round : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%enter_round : @storage
                SWAP;       # @storage : @parameter%enter_round
                # self.data.uuid += 1 # @storage : @parameter%enter_round
                DUP;        # @storage : @storage : @parameter%enter_round
                GET 8;      # nat : @storage : @parameter%enter_round
                PUSH nat 1; # nat : nat : @storage : @parameter%enter_round
                ADD;        # nat : @storage : @parameter%enter_round
                UPDATE 8;   # @storage : @parameter%enter_round
                # self.data.entries[self.data.uuid] = sp.record(address = params, creator = sp.sender, status = 0, clr_match = 0, deposit_withdrawn = False) # @storage : @parameter%enter_round
                DUP;        # @storage : @storage : @parameter%enter_round
                DUG 2;      # @storage : @parameter%enter_round : @storage
                UNPAIR;     # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                UNPAIR;     # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                SWAP;       # pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                UNPAIR;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                PUSH bool False; # bool : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                PUSH nat 0; # nat : bool : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                DUP;        # nat : nat : bool : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                SENDER;     # @sender : nat : nat : bool : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                DUP 9;      # @parameter%enter_round : @sender : nat : nat : bool : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                PAIR 5;     # pair @parameter%enter_round (pair @sender (pair nat (pair nat bool))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                SOME;       # option (pair @parameter%enter_round (pair @sender (pair nat (pair nat bool)))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : @storage
                DIG 6;      # @storage : option (pair @parameter%enter_round (pair @sender (pair nat (pair nat bool)))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round
                GET 8;      # nat : option (pair @parameter%enter_round (pair @sender (pair nat (pair nat bool)))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round
                UPDATE;     # big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round
                PAIR;       # pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round
                SWAP;       # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round
                PAIR;       # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round
                PAIR;       # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%enter_round
                # self.data.entry_address_to_id[params] = self.data.uuid # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%enter_round
                DUP;        # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%enter_round
                DUG 2;      # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%enter_round : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                UNPAIR;     # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                UNPAIR;     # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                SWAP;       # pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                UNPAIR;     # big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                SWAP;       # pair (big_map %entry_address_to_id address nat) (bool %matches_set) : big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                UNPAIR;     # big_map address nat : bool : big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                DIG 6;      # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : big_map address nat : bool : big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round
                GET 8;      # nat : big_map address nat : bool : big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round
                SOME;       # option nat : big_map address nat : bool : big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%enter_round
                DIG 6;      # @parameter%enter_round : option nat : big_map address nat : bool : big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
                UPDATE;     # big_map address nat : bool : big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
                PAIR;       # pair (big_map address nat) bool : big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
                SWAP;       # big_map nat (pair address (pair address (pair nat (pair nat bool)))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
                PAIR;       # pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map address nat) bool) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
                SWAP;       # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map address nat) bool) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
                PAIR;       # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map address nat) bool)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))
                PAIR;       # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map address nat) bool))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                NIL operation; # list operation : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map address nat) bool))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
              }; # list operation : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map address nat) bool))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
          }; # list operation : pair (pair (pair address (big_map (pair address nat) (pair bytes nat))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map address nat) bool))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%set_clr_matches
                # == set_clr_matches ==
                # sp.verify(sp.sender == self.data.admin, 'NOT_ALLOWED') # @storage : @parameter%set_clr_matches
                DUP;        # @storage : @storage : @parameter%set_clr_matches
                DUG 2;      # @storage : @parameter%set_clr_matches : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches : @storage
                CAR;        # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : @parameter%set_clr_matches : @storage
                CAR;        # address : @parameter%set_clr_matches : @storage
                SENDER;     # @sender : address : @parameter%set_clr_matches : @storage
                COMPARE;    # int : @parameter%set_clr_matches : @storage
                EQ;         # bool : @parameter%set_clr_matches : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : @parameter%set_clr_matches : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_clr_matches : @storage
                SWAP;       # @storage : @parameter%set_clr_matches
                # sp.verify(sp.now > self.data.round_event_timestamps.cooldown_period_end, 'COOLDOWN_NOT_OVER') # @storage : @parameter%set_clr_matches
                DUP;        # @storage : @storage : @parameter%set_clr_matches
                DUG 2;      # @storage : @parameter%set_clr_matches : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%set_clr_matches : @storage
                CAR;        # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : @parameter%set_clr_matches : @storage
                GET 5;      # timestamp : @parameter%set_clr_matches : @storage
                NOW;        # @now : timestamp : @parameter%set_clr_matches : @storage
                COMPARE;    # int : @parameter%set_clr_matches : @storage
                GT;         # bool : @parameter%set_clr_matches : @storage
                IF
                  {}
                  {
                    PUSH string "COOLDOWN_NOT_OVER"; # string : @parameter%set_clr_matches : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_clr_matches : @storage
                SWAP;       # @storage : @parameter%set_clr_matches
                # if ~ self.data.matches_set: # @storage : @parameter%set_clr_matches
                DUP;        # @storage : @storage : @parameter%set_clr_matches
                DUG 2;      # @storage : @parameter%set_clr_matches : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches : @storage
                GET 6;      # bool : @parameter%set_clr_matches : @storage
                IF
                  {}
                  {
                    SWAP;       # @storage : @parameter%set_clr_matches
                    # self.data.round_event_timestamps.challenge_period_end = sp.add_seconds(sp.now, 604800) # @storage : @parameter%set_clr_matches
                    UNPAIR;     # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    SWAP;       # pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches
                    UNPAIR;     # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)) : pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches
                    UNPAIR;     # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))) : pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)) : pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches
                    NOW;        # @now : pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))) : pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)) : pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches
                    PUSH int 604800; # int : @now : pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))) : pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)) : pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches
                    ADD;        # timestamp : pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))) : pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)) : pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches
                    UPDATE 6;   # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))) : pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)) : pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches
                    PAIR;       # pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)) : pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches
                    PAIR;       # pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%set_clr_matches
                    SWAP;       # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    # self.data.matches_set = True # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    UNPAIR;     # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    SWAP;       # pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    UNPAIR;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    SWAP;       # pair (big_map %entry_address_to_id address nat) (bool %matches_set) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    CAR;        # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    PUSH bool True; # bool : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    SWAP;       # big_map address nat : bool : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    PAIR;       # pair (big_map address nat) bool : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    SWAP;       # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    PAIR;       # pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    SWAP;       # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    PAIR;       # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool)) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    PAIR;       # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%set_clr_matches
                    SWAP;       # @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                  }; # @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                SWAP;       # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%set_clr_matches
                # sp.verify(sp.now < self.data.round_event_timestamps.challenge_period_end, 'CLR_SETTING_PERIOD_OVER') # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%set_clr_matches
                DUP;        # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%set_clr_matches
                DUG 2;      # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                GET 3;      # pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                CAR;        # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                GET 6;      # timestamp : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                NOW;        # @now : timestamp : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                COMPARE;    # int : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                LT;         # bool : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                IF
                  {}
                  {
                    PUSH string "CLR_SETTING_PERIOD_OVER"; # string : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                    FAILWITH;   # FAILED
                  }; # @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                # for entry_id in params.keys(): ... # @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                DUP;        # @parameter%set_clr_matches : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                ITER
                  {
                    CAR;        # nat : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                    # self.data.entries[entry_id].clr_match = params[entry_id] # nat : @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                    DIG 2;      # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : nat : @parameter%set_clr_matches
                    UNPAIR;     # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool)) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    UNPAIR;     # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    SWAP;       # pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    UNPAIR;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    DUP;        # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    DUP 6;      # nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    DUP;        # nat : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    DUG 2;      # nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    IF_NONE
                      {
                        PUSH int 304; # int : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    DUP 8;      # @parameter%set_clr_matches : @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : nat : @parameter%set_clr_matches
                    DIG 7;      # nat : @parameter%set_clr_matches : @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    GET;        # option nat : @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    IF_NONE
                      {
                        PUSH int 304; # int : @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:304 # @some : @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                      }; # @some : @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    UPDATE 7;   # @some : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    SOME;       # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    SWAP;       # nat : option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    UPDATE;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map address nat) bool : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    PAIR;       # pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    SWAP;       # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    PAIR;       # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool)) : pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : @parameter%set_clr_matches
                    PAIR;       # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : @parameter%set_clr_matches
                    SWAP;       # @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                  }; # @parameter%set_clr_matches : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                DROP;       # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
                NIL operation; # list operation : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
              }
              {
                SWAP;       # @storage : @parameter%sponsor
                # == sponsor ==
                # sp.verify(~ (self.data.sponsors.contains(sp.sender)), 'ALREADY_SPONSORED') # @storage : @parameter%sponsor
                DUP;        # @storage : @storage : @parameter%sponsor
                DUG 2;      # @storage : @parameter%sponsor : @storage
                GET 5;      # map address nat : @parameter%sponsor : @storage
                SENDER;     # @sender : map address nat : @parameter%sponsor : @storage
                MEM;        # bool : @parameter%sponsor : @storage
                IF
                  {
                    PUSH string "ALREADY_SPONSORED"; # string : @parameter%sponsor : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%sponsor : @storage
                # sp.verify(params > 0, 'ZERO_VALUE_NOT_ALLOWED') # @parameter%sponsor : @storage
                DUP;        # @parameter%sponsor : @parameter%sponsor : @storage
                PUSH nat 0; # nat : @parameter%sponsor : @parameter%sponsor : @storage
                COMPARE;    # int : @parameter%sponsor : @storage
                LT;         # bool : @parameter%sponsor : @storage
                IF
                  {}
                  {
                    PUSH string "ZERO_VALUE_NOT_ALLOWED"; # string : @parameter%sponsor : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%sponsor : @storage
                SWAP;       # @storage : @parameter%sponsor
                # sp.verify(sp.now < self.data.round_event_timestamps.contribution_start, 'NOT_ACCEPTING_SPONSORS') # @storage : @parameter%sponsor
                DUP;        # @storage : @storage : @parameter%sponsor
                DUG 2;      # @storage : @parameter%sponsor : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%sponsor : @storage
                CAR;        # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : @parameter%sponsor : @storage
                CAR;        # timestamp : @parameter%sponsor : @storage
                NOW;        # @now : timestamp : @parameter%sponsor : @storage
                COMPARE;    # int : @parameter%sponsor : @storage
                LT;         # bool : @parameter%sponsor : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ACCEPTING_SPONSORS"; # string : @parameter%sponsor : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%sponsor : @storage
                # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = params), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.round_meta.stablecoin_address, entry_point='transfer').open_some(message = 'INVALID_STABLECOIN')) # @parameter%sponsor : @storage
                NIL operation; # list operation : @parameter%sponsor : @storage
                DUP 3;      # @storage : list operation : @parameter%sponsor : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : list operation : @parameter%sponsor : @storage
                GET 7;      # address : list operation : @parameter%sponsor : @storage
                CONTRACT %transfer (pair address (pair address nat)); # option (contract (pair address (pair address nat))) : list operation : @parameter%sponsor : @storage
                IF_NONE
                  {
                    PUSH string "INVALID_STABLECOIN"; # string : list operation : @parameter%sponsor : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%sponsor : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%sponsor : @storage
                DUP 4;      # @parameter%sponsor : mutez : @some : list operation : @parameter%sponsor : @storage
                SELF_ADDRESS; # @self : @parameter%sponsor : mutez : @some : list operation : @parameter%sponsor : @storage
                SENDER;     # @sender : @self : @parameter%sponsor : mutez : @some : list operation : @parameter%sponsor : @storage
                PAIR 3;     # pair @sender (pair @self @parameter%sponsor) : mutez : @some : list operation : @parameter%sponsor : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%sponsor : @storage
                CONS;       # list operation : @parameter%sponsor : @storage
                # self.data.sponsors[sp.sender] = params # list operation : @parameter%sponsor : @storage
                DIG 2;      # @storage : list operation : @parameter%sponsor
                DUP;        # @storage : @storage : list operation : @parameter%sponsor
                GET 5;      # map address nat : @storage : list operation : @parameter%sponsor
                DUP 4;      # @parameter%sponsor : map address nat : @storage : list operation : @parameter%sponsor
                SOME;       # option nat : map address nat : @storage : list operation : @parameter%sponsor
                SENDER;     # @sender : option nat : map address nat : @storage : list operation : @parameter%sponsor
                UPDATE;     # map address nat : @storage : list operation : @parameter%sponsor
                UPDATE 5;   # @storage : list operation : @parameter%sponsor
                # self.data.total_sponsored_amount += params # @storage : list operation : @parameter%sponsor
                DUP;        # @storage : @storage : list operation : @parameter%sponsor
                GET 7;      # nat : @storage : list operation : @parameter%sponsor
                DIG 3;      # @parameter%sponsor : nat : @storage : list operation
                ADD;        # nat : @storage : list operation
                UPDATE 7;   # @storage : list operation
                SWAP;       # list operation : @storage
              }; # list operation : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%withdraw_deposit
                # == withdraw_deposit ==
                # sp.verify(self.data.entry_address_to_id.contains(params), 'INVALID_ENTRY_ADDRESS') # @storage : @parameter%withdraw_deposit
                DUP;        # @storage : @storage : @parameter%withdraw_deposit
                DUG 2;      # @storage : @parameter%withdraw_deposit : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%withdraw_deposit : @storage
                GET 5;      # big_map address nat : @parameter%withdraw_deposit : @storage
                SWAP;       # @parameter%withdraw_deposit : big_map address nat : @storage
                DUP;        # @parameter%withdraw_deposit : @parameter%withdraw_deposit : big_map address nat : @storage
                DUG 2;      # @parameter%withdraw_deposit : big_map address nat : @parameter%withdraw_deposit : @storage
                MEM;        # bool : @parameter%withdraw_deposit : @storage
                IF
                  {}
                  {
                    PUSH string "INVALID_ENTRY_ADDRESS"; # string : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%withdraw_deposit : @storage
                # sp.verify(self.data.entries[self.data.entry_address_to_id[params]].status != 1, 'ENTRY_DISQUALIFIED') # @parameter%withdraw_deposit : @storage
                PUSH nat 1; # nat : @parameter%withdraw_deposit : @storage
                DIG 2;      # @storage : nat : @parameter%withdraw_deposit
                DUP;        # @storage : @storage : nat : @parameter%withdraw_deposit
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : nat : @parameter%withdraw_deposit
                GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : nat : @parameter%withdraw_deposit
                SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit
                DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit
                DUG 4;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit : @storage
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit : @storage
                DUP 4;      # @parameter%withdraw_deposit : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit : @storage
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit : @storage
                IF_NONE
                  {
                    PUSH int 360; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:360 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit : @storage
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit : @storage
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_deposit : @storage
                IF_NONE
                  {
                    PUSH int 361; # int : nat : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:361 # @some : nat : @parameter%withdraw_deposit : @storage
                  }; # @some : nat : @parameter%withdraw_deposit : @storage
                GET 5;      # nat : nat : @parameter%withdraw_deposit : @storage
                COMPARE;    # int : @parameter%withdraw_deposit : @storage
                NEQ;        # bool : @parameter%withdraw_deposit : @storage
                IF
                  {}
                  {
                    PUSH string "ENTRY_DISQUALIFIED"; # string : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%withdraw_deposit : @storage
                SWAP;       # @storage : @parameter%withdraw_deposit
                # sp.verify(sp.now > self.data.round_event_timestamps.cooldown_period_end, 'COOLDOWN_NOT_OVER') # @storage : @parameter%withdraw_deposit
                DUP;        # @storage : @storage : @parameter%withdraw_deposit
                DUG 2;      # @storage : @parameter%withdraw_deposit : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%withdraw_deposit : @storage
                CAR;        # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : @parameter%withdraw_deposit : @storage
                GET 5;      # timestamp : @parameter%withdraw_deposit : @storage
                NOW;        # @now : timestamp : @parameter%withdraw_deposit : @storage
                COMPARE;    # int : @parameter%withdraw_deposit : @storage
                GT;         # bool : @parameter%withdraw_deposit : @storage
                IF
                  {}
                  {
                    PUSH string "COOLDOWN_NOT_OVER"; # string : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%withdraw_deposit : @storage
                SWAP;       # @storage : @parameter%withdraw_deposit
                # sp.verify(~ self.data.entries[self.data.entry_address_to_id[params]].deposit_withdrawn, 'DEPOSIT_ALREADY_WITHDRAWN') # @storage : @parameter%withdraw_deposit
                DUP;        # @storage : @storage : @parameter%withdraw_deposit
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : @parameter%withdraw_deposit
                GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : @parameter%withdraw_deposit
                SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit
                DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit
                DUG 3;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit : @storage
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit : @storage
                DUP 3;      # @parameter%withdraw_deposit : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit : @storage
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit : @storage
                IF_NONE
                  {
                    PUSH int 360; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:360 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit : @storage
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit : @storage
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @parameter%withdraw_deposit : @storage
                IF_NONE
                  {
                    PUSH int 361; # int : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:361 # @some : @parameter%withdraw_deposit : @storage
                  }; # @some : @parameter%withdraw_deposit : @storage
                GET 8;      # bool : @parameter%withdraw_deposit : @storage
                IF
                  {
                    PUSH string "DEPOSIT_ALREADY_WITHDRAWN"; # string : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%withdraw_deposit : @storage
                # sp.send(self.data.entries[self.data.entry_address_to_id[params]].creator, self.data.round_meta.security_deposit_amount) # @parameter%withdraw_deposit : @storage
                NIL operation; # list operation : @parameter%withdraw_deposit : @storage
                DIG 2;      # @storage : list operation : @parameter%withdraw_deposit
                DUP;        # @storage : @storage : list operation : @parameter%withdraw_deposit
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : list operation : @parameter%withdraw_deposit
                GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : list operation : @parameter%withdraw_deposit
                SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit
                DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit
                DUG 4;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit : @storage
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit : @storage
                DUP 4;      # @parameter%withdraw_deposit : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit : @storage
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit : @storage
                IF_NONE
                  {
                    PUSH int 360; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:360 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit : @storage
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit : @storage
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : list operation : @parameter%withdraw_deposit : @storage
                IF_NONE
                  {
                    PUSH int 361; # int : list operation : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:361 # @some : list operation : @parameter%withdraw_deposit : @storage
                  }; # @some : list operation : @parameter%withdraw_deposit : @storage
                GET 3;      # address : list operation : @parameter%withdraw_deposit : @storage
                CONTRACT unit; # option (contract unit) : list operation : @parameter%withdraw_deposit : @storage
                IF_NONE
                  {
                    PUSH int 375; # int : list operation : @parameter%withdraw_deposit : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%withdraw_deposit : @storage
                DUP 4;      # @storage : @some : list operation : @parameter%withdraw_deposit : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @some : list operation : @parameter%withdraw_deposit : @storage
                GET 5;      # mutez : @some : list operation : @parameter%withdraw_deposit : @storage
                UNIT;       # unit : mutez : @some : list operation : @parameter%withdraw_deposit : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%withdraw_deposit : @storage
                CONS;       # list operation : @parameter%withdraw_deposit : @storage
                # self.data.entries[self.data.entry_address_to_id[params]].deposit_withdrawn = True # list operation : @parameter%withdraw_deposit : @storage
                DUP 3;      # @storage : list operation : @parameter%withdraw_deposit : @storage
                UNPAIR;     # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_deposit : @storage
                UNPAIR;     # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_deposit : @storage
                SWAP;       # pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_deposit : @storage
                UNPAIR;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_deposit : @storage
                DUP;        # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_deposit : @storage
                DIG 7;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_deposit
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_deposit
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_deposit
                DIG 7;      # @parameter%withdraw_deposit : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                IF_NONE
                  {
                    PUSH int 360; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:360 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                DUP;        # @some : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                DUG 2;      # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                IF_NONE
                  {
                    PUSH int 377; # int : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                PUSH bool True; # bool : @some : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                UPDATE 8;   # @some : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                SOME;       # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                SWAP;       # @some : option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                UPDATE;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                PAIR;       # pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                SWAP;       # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                PAIR;       # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                PAIR;       # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : list operation
                SWAP;       # list operation : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
              }
              {
                SWAP;       # @storage : @parameter%withdraw_match
                # == withdraw_match ==
                # sp.verify(self.data.entry_address_to_id.contains(params), 'INVALID_ENTRY_ADDRESS') # @storage : @parameter%withdraw_match
                DUP;        # @storage : @storage : @parameter%withdraw_match
                DUG 2;      # @storage : @parameter%withdraw_match : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%withdraw_match : @storage
                GET 5;      # big_map address nat : @parameter%withdraw_match : @storage
                SWAP;       # @parameter%withdraw_match : big_map address nat : @storage
                DUP;        # @parameter%withdraw_match : @parameter%withdraw_match : big_map address nat : @storage
                DUG 2;      # @parameter%withdraw_match : big_map address nat : @parameter%withdraw_match : @storage
                MEM;        # bool : @parameter%withdraw_match : @storage
                IF
                  {}
                  {
                    PUSH string "INVALID_ENTRY_ADDRESS"; # string : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%withdraw_match : @storage
                # sp.verify(self.data.entries[self.data.entry_address_to_id[params]].status == 0, 'ENTRY_NOT_ACTIVE') # @parameter%withdraw_match : @storage
                PUSH nat 0; # nat : @parameter%withdraw_match : @storage
                DIG 2;      # @storage : nat : @parameter%withdraw_match
                DUP;        # @storage : @storage : nat : @parameter%withdraw_match
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : nat : @parameter%withdraw_match
                GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : nat : @parameter%withdraw_match
                SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match
                DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match
                DUG 4;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                DUP 4;      # @parameter%withdraw_match : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                IF_NONE
                  {
                    PUSH int 313; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:313 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                IF_NONE
                  {
                    PUSH int 314; # int : nat : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:314 # @some : nat : @parameter%withdraw_match : @storage
                  }; # @some : nat : @parameter%withdraw_match : @storage
                GET 5;      # nat : nat : @parameter%withdraw_match : @storage
                COMPARE;    # int : @parameter%withdraw_match : @storage
                EQ;         # bool : @parameter%withdraw_match : @storage
                IF
                  {}
                  {
                    PUSH string "ENTRY_NOT_ACTIVE"; # string : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%withdraw_match : @storage
                SWAP;       # @storage : @parameter%withdraw_match
                # sp.verify(self.data.matches_set, 'MATCHES_NOT_SET') # @storage : @parameter%withdraw_match
                DUP;        # @storage : @storage : @parameter%withdraw_match
                DUG 2;      # @storage : @parameter%withdraw_match : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @parameter%withdraw_match : @storage
                GET 6;      # bool : @parameter%withdraw_match : @storage
                IF
                  {}
                  {
                    PUSH string "MATCHES_NOT_SET"; # string : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%withdraw_match : @storage
                SWAP;       # @storage : @parameter%withdraw_match
                # sp.verify(sp.now > self.data.round_event_timestamps.challenge_period_end, 'CHALLENGE_PERIOD_ONGOING') # @storage : @parameter%withdraw_match
                DUP;        # @storage : @storage : @parameter%withdraw_match
                DUG 2;      # @storage : @parameter%withdraw_match : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : @parameter%withdraw_match : @storage
                CAR;        # pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end))) : @parameter%withdraw_match : @storage
                GET 6;      # timestamp : @parameter%withdraw_match : @storage
                NOW;        # @now : timestamp : @parameter%withdraw_match : @storage
                COMPARE;    # int : @parameter%withdraw_match : @storage
                GT;         # bool : @parameter%withdraw_match : @storage
                IF
                  {}
                  {
                    PUSH string "CHALLENGE_PERIOD_ONGOING"; # string : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%withdraw_match : @storage
                # sp.verify(self.data.entries[self.data.entry_address_to_id[params]].clr_match != 0, 'ZERO_CLR_MATCH') # @parameter%withdraw_match : @storage
                PUSH nat 0; # nat : @parameter%withdraw_match : @storage
                DIG 2;      # @storage : nat : @parameter%withdraw_match
                DUP;        # @storage : @storage : nat : @parameter%withdraw_match
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : nat : @parameter%withdraw_match
                GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : nat : @parameter%withdraw_match
                SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match
                DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match
                DUG 4;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                DUP 4;      # @parameter%withdraw_match : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                IF_NONE
                  {
                    PUSH int 313; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:313 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : @parameter%withdraw_match : @storage
                IF_NONE
                  {
                    PUSH int 314; # int : nat : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:314 # @some : nat : @parameter%withdraw_match : @storage
                  }; # @some : nat : @parameter%withdraw_match : @storage
                GET 7;      # nat : nat : @parameter%withdraw_match : @storage
                COMPARE;    # int : @parameter%withdraw_match : @storage
                NEQ;        # bool : @parameter%withdraw_match : @storage
                IF
                  {}
                  {
                    PUSH string "ZERO_CLR_MATCH"; # string : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%withdraw_match : @storage
                # sp.transfer(sp.record(from_ = sp.self_address, to_ = self.data.entries[self.data.entry_address_to_id[params]].address, value = self.data.entries[self.data.entry_address_to_id[params]].clr_match), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.round_meta.stablecoin_address, entry_point='transfer').open_some(message = 'INVALID_STABLECOIN')) # @parameter%withdraw_match : @storage
                NIL operation; # list operation : @parameter%withdraw_match : @storage
                DUP 3;      # @storage : list operation : @parameter%withdraw_match : @storage
                GET 3;      # pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address))))) : list operation : @parameter%withdraw_match : @storage
                GET 7;      # address : list operation : @parameter%withdraw_match : @storage
                CONTRACT %transfer (pair address (pair address nat)); # option (contract (pair address (pair address nat))) : list operation : @parameter%withdraw_match : @storage
                IF_NONE
                  {
                    PUSH string "INVALID_STABLECOIN"; # string : list operation : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%withdraw_match : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%withdraw_match : @storage
                DIG 4;      # @storage : mutez : @some : list operation : @parameter%withdraw_match
                DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%withdraw_match
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : mutez : @some : list operation : @parameter%withdraw_match
                GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : mutez : @some : list operation : @parameter%withdraw_match
                SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match
                DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match
                DUG 6;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                DUP 6;      # @parameter%withdraw_match : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                IF_NONE
                  {
                    PUSH int 313; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:313 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                IF_NONE
                  {
                    PUSH int 314; # int : mutez : @some : list operation : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:314 # @some : mutez : @some : list operation : @parameter%withdraw_match : @storage
                  }; # @some : mutez : @some : list operation : @parameter%withdraw_match : @storage
                GET 7;      # nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                DIG 5;      # @storage : nat : mutez : @some : list operation : @parameter%withdraw_match
                DUP;        # @storage : @storage : nat : mutez : @some : list operation : @parameter%withdraw_match
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : @storage : nat : mutez : @some : list operation : @parameter%withdraw_match
                GET 3;      # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @storage : nat : mutez : @some : list operation : @parameter%withdraw_match
                SWAP;       # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match
                DUP;        # @storage : @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match
                DUG 7;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                DUP 7;      # @parameter%withdraw_match : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                IF_NONE
                  {
                    PUSH int 313; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:313 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                IF_NONE
                  {
                    PUSH int 314; # int : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:314 # @some : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                  }; # @some : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                CAR;        # address : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @parameter%withdraw_match : @storage
                PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @parameter%withdraw_match : @storage
                TRANSFER_TOKENS; # operation : list operation : @parameter%withdraw_match : @storage
                CONS;       # list operation : @parameter%withdraw_match : @storage
                # self.data.entries[self.data.entry_address_to_id[params]].status = 2 # list operation : @parameter%withdraw_match : @storage
                DUP 3;      # @storage : list operation : @parameter%withdraw_match : @storage
                UNPAIR;     # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_match : @storage
                UNPAIR;     # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_match : @storage
                SWAP;       # pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_match : @storage
                UNPAIR;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_match : @storage
                DUP;        # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_match : @storage
                DIG 7;      # @storage : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_match
                CAR;        # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map %entries nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_match
                GET 5;      # big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation : @parameter%withdraw_match
                DIG 7;      # @parameter%withdraw_match : big_map address nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                GET;        # option nat : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                IF_NONE
                  {
                    PUSH int 313; # int : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:313 # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                  }; # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                DUP;        # @some : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                DUG 2;      # @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                GET;        # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                IF_NONE
                  {
                    PUSH int 351; # int : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                PUSH nat 2; # nat : @some : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                UPDATE 5;   # @some : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                SOME;       # option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : @some : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                SWAP;       # @some : option (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                UPDATE;     # big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn))))) : pair (big_map %entry_address_to_id address nat) (bool %matches_set) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                PAIR;       # pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                SWAP;       # pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value))) : pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                PAIR;       # pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set))) : pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))) : list operation
                PAIR;       # pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))) : list operation
                SWAP;       # list operation : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
              }; # list operation : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map %entry_address_to_id address nat) (bool %matches_set)))) (pair (pair (pair %round_event_timestamps (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair %round_meta (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
          }; # list operation : pair (pair (pair (address %admin) (big_map %contributions (pair address nat) (pair (bytes %token_identifier) (nat %value)))) (pair (big_map nat (pair (address %address) (pair (address %creator) (pair (nat %status) (pair (nat %clr_match) (bool %deposit_withdrawn)))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
      }; # list operation : pair (pair (pair address (big_map (pair address nat) (pair bytes nat))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid))))
    PAIR;       # pair (list operation) (pair (pair (pair address (big_map (pair address nat) (pair bytes nat))) (pair (big_map nat (pair address (pair address (pair nat (pair nat bool))))) (pair (big_map address nat) bool))) (pair (pair (pair (timestamp %contribution_start) (pair (timestamp %contribution_end) (pair (timestamp %cooldown_period_end) (timestamp %challenge_period_end)))) (pair (set %token_set bytes) (pair (mutez %security_deposit_amount) (pair (address %stablecoin_address) (pair (address %donation_handler_address) (address %community_fund_address)))))) (pair (map %sponsors address nat) (pair (nat %total_sponsored_amount) (nat %uuid)))))
  };