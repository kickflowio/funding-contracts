parameter (or (pair %donate (address %entry_address) (pair (bytes %token_identifier) (nat %value))) (or (option %set_round_address address) (address %set_whitelist_address)));
storage   (pair (address %admin) (pair (option %round_address address) (address %whitelist_address)));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        SWAP;       # @storage : @parameter%donate
        # == donate ==
        # sp.verify(self.data.round_address.is_some(), 'NO_ROUND_IS_ACTIVE') # @storage : @parameter%donate
        DUP;        # @storage : @storage : @parameter%donate
        DUG 2;      # @storage : @parameter%donate : @storage
        GET 3;      # option address : @parameter%donate : @storage
        IF_NONE
          {
            PUSH string "NO_ROUND_IS_ACTIVE"; # string : @parameter%donate : @storage
            FAILWITH;   # FAILED
          }
          {
            DROP;       # @parameter%donate : @storage
          }; # @parameter%donate : @storage
        # sp.transfer(sp.sender, sp.tez(0), sp.contract(sp.TAddress, self.data.whitelist_address, entry_point='verify_whitelisted').open_some(message = 'INVALID_WHITELIST')) # @parameter%donate : @storage
        NIL operation; # list operation : @parameter%donate : @storage
        DUP 3;      # @storage : list operation : @parameter%donate : @storage
        GET 4;      # address : list operation : @parameter%donate : @storage
        CONTRACT %verify_whitelisted address; # option (contract address) : list operation : @parameter%donate : @storage
        IF_NONE
          {
            PUSH string "INVALID_WHITELIST"; # string : list operation : @parameter%donate : @storage
            FAILWITH;   # FAILED
          }
          {}; # @some : list operation : @parameter%donate : @storage
        PUSH mutez 0; # mutez : @some : list operation : @parameter%donate : @storage
        SENDER;     # @sender : mutez : @some : list operation : @parameter%donate : @storage
        TRANSFER_TOKENS; # operation : list operation : @parameter%donate : @storage
        CONS;       # list operation : @parameter%donate : @storage
        # sp.verify(params.value > 0, 'ZERO_DONATION_NOT_ALLOWED') # list operation : @parameter%donate : @storage
        PUSH nat 0; # nat : list operation : @parameter%donate : @storage
        DUP 3;      # @parameter%donate : nat : list operation : @parameter%donate : @storage
        GET 4;      # nat : nat : list operation : @parameter%donate : @storage
        COMPARE;    # int : list operation : @parameter%donate : @storage
        GT;         # bool : list operation : @parameter%donate : @storage
        IF
          {}
          {
            PUSH string "ZERO_DONATION_NOT_ALLOWED"; # string : list operation : @parameter%donate : @storage
            FAILWITH;   # FAILED
          }; # list operation : @parameter%donate : @storage
        # if params.token_identifier == sp.pack('TEZ_IDENTIFIER'): # list operation : @parameter%donate : @storage
        PUSH string "TEZ_IDENTIFIER"; # string : list operation : @parameter%donate : @storage
        PACK;       # bytes : list operation : @parameter%donate : @storage
        DUP 3;      # @parameter%donate : bytes : list operation : @parameter%donate : @storage
        GET 3;      # bytes : bytes : list operation : @parameter%donate : @storage
        COMPARE;    # int : list operation : @parameter%donate : @storage
        EQ;         # bool : list operation : @parameter%donate : @storage
        IF
          {
            # sp.verify(params.value == sp.fst(sp.ediv(sp.amount, sp.mutez(1)).open_some(message = sp.unit)), 'INCORRECT_VALUE_PARAMETER') # list operation : @parameter%donate : @storage
            PUSH mutez 1; # mutez : list operation : @parameter%donate : @storage
            AMOUNT;     # @amount : mutez : list operation : @parameter%donate : @storage
            EDIV;       # option (pair nat mutez) : list operation : @parameter%donate : @storage
            IF_NONE
              {
                UNIT;       # unit : list operation : @parameter%donate : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%donate : @storage
            CAR;        # nat : list operation : @parameter%donate : @storage
            DUP 3;      # @parameter%donate : nat : list operation : @parameter%donate : @storage
            GET 4;      # nat : nat : list operation : @parameter%donate : @storage
            COMPARE;    # int : list operation : @parameter%donate : @storage
            EQ;         # bool : list operation : @parameter%donate : @storage
            IF
              {}
              {
                PUSH string "INCORRECT_VALUE_PARAMETER"; # string : list operation : @parameter%donate : @storage
                FAILWITH;   # FAILED
              }; # list operation : @parameter%donate : @storage
            # sp.transfer(sp.record(from_ = sp.sender, entry_address = params.entry_address, token_identifier = params.token_identifier, value = sp.fst(sp.ediv(sp.amount, sp.mutez(1)).open_some(message = sp.unit))), sp.tez(0), sp.contract(sp.TRecord(entry_address = sp.TAddress, from_ = sp.TAddress, token_identifier = sp.TBytes, value = sp.TNat).layout(("from_", ("entry_address", ("token_identifier", "value")))), self.data.round_address.open_some(), entry_point='contribute').open_some()) # list operation : @parameter%donate : @storage
            DUP;        # list operation : list operation : @parameter%donate : @storage
            DUP 4;      # @storage : list operation : list operation : @parameter%donate : @storage
            GET 3;      # option address : list operation : list operation : @parameter%donate : @storage
            IF_NONE
              {
                PUSH int 70; # int : list operation : list operation : @parameter%donate : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : list operation : @parameter%donate : @storage
            CONTRACT %contribute (pair address (pair address (pair bytes nat))); # option (contract (pair address (pair address (pair bytes nat)))) : list operation : list operation : @parameter%donate : @storage
            IF_NONE
              {
                PUSH int 55; # int : list operation : list operation : @parameter%donate : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : list operation : @parameter%donate : @storage
            PUSH mutez 0; # mutez : @some : list operation : list operation : @parameter%donate : @storage
            PUSH mutez 1; # mutez : mutez : @some : list operation : list operation : @parameter%donate : @storage
            AMOUNT;     # @amount : mutez : mutez : @some : list operation : list operation : @parameter%donate : @storage
            EDIV;       # option (pair nat mutez) : mutez : @some : list operation : list operation : @parameter%donate : @storage
            IF_NONE
              {
                UNIT;       # unit : mutez : @some : list operation : list operation : @parameter%donate : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : mutez : @some : list operation : list operation : @parameter%donate : @storage
            CAR;        # nat : mutez : @some : list operation : list operation : @parameter%donate : @storage
            DIG 5;      # @parameter%donate : nat : mutez : @some : list operation : list operation : @storage
            DUP;        # @parameter%donate : @parameter%donate : nat : mutez : @some : list operation : list operation : @storage
            GET 3;      # bytes : @parameter%donate : nat : mutez : @some : list operation : list operation : @storage
            SWAP;       # @parameter%donate : bytes : nat : mutez : @some : list operation : list operation : @storage
            DUP;        # @parameter%donate : @parameter%donate : bytes : nat : mutez : @some : list operation : list operation : @storage
            DUG 7;      # @parameter%donate : bytes : nat : mutez : @some : list operation : list operation : @parameter%donate : @storage
            CAR;        # address : bytes : nat : mutez : @some : list operation : list operation : @parameter%donate : @storage
            SENDER;     # @sender : address : bytes : nat : mutez : @some : list operation : list operation : @parameter%donate : @storage
            PAIR 4;     # pair @sender (pair address (pair bytes nat)) : mutez : @some : list operation : list operation : @parameter%donate : @storage
            DIG 4;      # list operation : pair @sender (pair address (pair bytes nat)) : mutez : @some : list operation : @parameter%donate : @storage
            DROP;       # pair @sender (pair address (pair bytes nat)) : mutez : @some : list operation : @parameter%donate : @storage
            TRANSFER_TOKENS; # operation : list operation : @parameter%donate : @storage
            CONS;       # list operation : @parameter%donate : @storage
            SWAP;       # @parameter%donate : list operation : @storage
            # sp.send(params.entry_address, sp.amount) # @parameter%donate : list operation : @storage
            CAR;        # address : list operation : @storage
            CONTRACT unit; # option (contract unit) : list operation : @storage
            IF_NONE
              {
                PUSH int 95; # int : list operation : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @storage
            AMOUNT;     # @amount : @some : list operation : @storage
            UNIT;       # unit : @amount : @some : list operation : @storage
            TRANSFER_TOKENS; # operation : list operation : @storage
            CONS;       # list operation : @storage
          }
          {
            # sp.transfer(sp.record(from_ = sp.sender, entry_address = params.entry_address, token_identifier = params.token_identifier, value = params.value), sp.tez(0), sp.contract(sp.TRecord(entry_address = sp.TAddress, from_ = sp.TAddress, token_identifier = sp.TBytes, value = sp.TNat).layout(("from_", ("entry_address", ("token_identifier", "value")))), self.data.round_address.open_some(), entry_point='contribute').open_some()) # list operation : @parameter%donate : @storage
            DUP;        # list operation : list operation : @parameter%donate : @storage
            DUP 4;      # @storage : list operation : list operation : @parameter%donate : @storage
            GET 3;      # option address : list operation : list operation : @parameter%donate : @storage
            IF_NONE
              {
                PUSH int 70; # int : list operation : list operation : @parameter%donate : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : list operation : @parameter%donate : @storage
            CONTRACT %contribute (pair address (pair address (pair bytes nat))); # option (contract (pair address (pair address (pair bytes nat)))) : list operation : list operation : @parameter%donate : @storage
            IF_NONE
              {
                PUSH int 55; # int : list operation : list operation : @parameter%donate : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : list operation : @parameter%donate : @storage
            PUSH mutez 0; # mutez : @some : list operation : list operation : @parameter%donate : @storage
            DIG 4;      # @parameter%donate : mutez : @some : list operation : list operation : @storage
            DUP;        # @parameter%donate : @parameter%donate : mutez : @some : list operation : list operation : @storage
            GET 4;      # nat : @parameter%donate : mutez : @some : list operation : list operation : @storage
            SWAP;       # @parameter%donate : nat : mutez : @some : list operation : list operation : @storage
            DUP;        # @parameter%donate : @parameter%donate : nat : mutez : @some : list operation : list operation : @storage
            GET 3;      # bytes : @parameter%donate : nat : mutez : @some : list operation : list operation : @storage
            SWAP;       # @parameter%donate : bytes : nat : mutez : @some : list operation : list operation : @storage
            DUP;        # @parameter%donate : @parameter%donate : bytes : nat : mutez : @some : list operation : list operation : @storage
            DUG 7;      # @parameter%donate : bytes : nat : mutez : @some : list operation : list operation : @parameter%donate : @storage
            CAR;        # address : bytes : nat : mutez : @some : list operation : list operation : @parameter%donate : @storage
            SENDER;     # @sender : address : bytes : nat : mutez : @some : list operation : list operation : @parameter%donate : @storage
            PAIR 4;     # pair @sender (pair address (pair bytes nat)) : mutez : @some : list operation : list operation : @parameter%donate : @storage
            DIG 4;      # list operation : pair @sender (pair address (pair bytes nat)) : mutez : @some : list operation : @parameter%donate : @storage
            DROP;       # pair @sender (pair address (pair bytes nat)) : mutez : @some : list operation : @parameter%donate : @storage
            TRANSFER_TOKENS; # operation : list operation : @parameter%donate : @storage
            CONS;       # list operation : @parameter%donate : @storage
            SWAP;       # @parameter%donate : list operation : @storage
            # sp.transfer(sp.record(from_ = sp.sender, to_ = params.entry_address, value = params.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), sp.unpack(params.token_identifier, sp.TAddress).open_some(message = 'INVALID_IDENTIFIER_BYTES'), entry_point='transfer').open_some()) # @parameter%donate : list operation : @storage
            DUP;        # @parameter%donate : @parameter%donate : list operation : @storage
            DUG 2;      # @parameter%donate : list operation : @parameter%donate : @storage
            GET 3;      # bytes : list operation : @parameter%donate : @storage
            UNPACK address; # option address : list operation : @parameter%donate : @storage
            IF_NONE
              {
                PUSH string "INVALID_IDENTIFIER_BYTES"; # string : list operation : @parameter%donate : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%donate : @storage
            CONTRACT %transfer (pair address (pair address nat)); # option (contract (pair address (pair address nat))) : list operation : @parameter%donate : @storage
            IF_NONE
              {
                PUSH int 116; # int : list operation : @parameter%donate : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : list operation : @parameter%donate : @storage
            PUSH mutez 0; # mutez : @some : list operation : @parameter%donate : @storage
            DIG 3;      # @parameter%donate : mutez : @some : list operation : @storage
            DUP;        # @parameter%donate : @parameter%donate : mutez : @some : list operation : @storage
            GET 4;      # nat : @parameter%donate : mutez : @some : list operation : @storage
            SWAP;       # @parameter%donate : nat : mutez : @some : list operation : @storage
            CAR;        # address : nat : mutez : @some : list operation : @storage
            SENDER;     # @sender : address : nat : mutez : @some : list operation : @storage
            PAIR 3;     # pair @sender (pair address nat) : mutez : @some : list operation : @storage
            TRANSFER_TOKENS; # operation : list operation : @storage
            CONS;       # list operation : @storage
          }; # list operation : @storage
      }
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%set_round_address
            # == set_round_address ==
            # sp.verify(sp.sender == self.data.admin, 'NOT_ALLOWED') # @storage : @parameter%set_round_address
            DUP;        # @storage : @storage : @parameter%set_round_address
            DUG 2;      # @storage : @parameter%set_round_address : @storage
            CAR;        # address : @parameter%set_round_address : @storage
            SENDER;     # @sender : address : @parameter%set_round_address : @storage
            COMPARE;    # int : @parameter%set_round_address : @storage
            EQ;         # bool : @parameter%set_round_address : @storage
            IF
              {}
              {
                PUSH string "NOT_ALLOWED"; # string : @parameter%set_round_address : @storage
                FAILWITH;   # FAILED
              }; # @parameter%set_round_address : @storage
            # self.data.round_address = params # @parameter%set_round_address : @storage
            UPDATE 3;   # @storage
          }
          {
            SWAP;       # @storage : @parameter%set_whitelist_address
            # == set_whitelist_address ==
            # sp.verify(sp.sender == self.data.admin, 'NOT_ALLOWED') # @storage : @parameter%set_whitelist_address
            DUP;        # @storage : @storage : @parameter%set_whitelist_address
            DUG 2;      # @storage : @parameter%set_whitelist_address : @storage
            CAR;        # address : @parameter%set_whitelist_address : @storage
            SENDER;     # @sender : address : @parameter%set_whitelist_address : @storage
            COMPARE;    # int : @parameter%set_whitelist_address : @storage
            EQ;         # bool : @parameter%set_whitelist_address : @storage
            IF
              {}
              {
                PUSH string "NOT_ALLOWED"; # string : @parameter%set_whitelist_address : @storage
                FAILWITH;   # FAILED
              }; # @parameter%set_whitelist_address : @storage
            # self.data.whitelist_address = params # @parameter%set_whitelist_address : @storage
            UPDATE 4;   # @storage
          }; # @storage
        NIL operation; # list operation : @storage
      }; # list operation : @storage
    NIL operation; # list operation : list operation : @storage
    SWAP;       # list operation : list operation : @storage
    ITER
      {
        CONS;       # list operation : @storage
      }; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };