parameter (or (or (unit %accept_administration) (or (address %add_governor) (address %propose_new_admin))) (or (address %remove_governor) (or (address %verify_whitelisted) (list %whitelist_addresses address))));
storage   (pair (pair (address %admin) (set %governors address)) (pair (option %proposed_admin address) (set %whitelist address)));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            DROP;       # @storage
            # == accept_administration ==
            # sp.verify(self.data.proposed_admin.is_some(), 'NO_ADMIN_PROPOSED') # @storage
            DUP;        # @storage : @storage
            GET 3;      # option address : @storage
            IF_NONE
              {
                PUSH string "NO_ADMIN_PROPOSED"; # string : @storage
                FAILWITH;   # FAILED
              }
              {
                DROP;       # @storage
              }; # @storage
            # sp.verify(sp.sender == self.data.proposed_admin.open_some(), 'NOT_ALLOWED') # @storage
            DUP;        # @storage : @storage
            GET 3;      # option address : @storage
            IF_NONE
              {
                PUSH int 82; # int : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @storage
            SENDER;     # @sender : @some : @storage
            COMPARE;    # int : @storage
            EQ;         # bool : @storage
            IF
              {}
              {
                PUSH string "NOT_ALLOWED"; # string : @storage
                FAILWITH;   # FAILED
              }; # @storage
            # self.data.admin = sp.sender # @storage
            UNPAIR;     # pair (address %admin) (set %governors address) : pair (option %proposed_admin address) (set %whitelist address)
            CDR;        # set address : pair (option %proposed_admin address) (set %whitelist address)
            SENDER;     # @sender : set address : pair (option %proposed_admin address) (set %whitelist address)
            PAIR;       # pair @sender (set address) : pair (option %proposed_admin address) (set %whitelist address)
            PAIR;       # pair (pair @sender (set address)) (pair (option %proposed_admin address) (set %whitelist address))
            # self.data.proposed_admin = sp.none # pair (pair @sender (set address)) (pair (option %proposed_admin address) (set %whitelist address))
            NONE address; # option address : pair (pair @sender (set address)) (pair (option %proposed_admin address) (set %whitelist address))
            UPDATE 3;   # pair (pair @sender (set address)) (pair (option %proposed_admin address) (set %whitelist address))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%add_governor
                # == add_governor ==
                # sp.verify(sp.sender == self.data.admin, 'NOT_ALLOWED') # @storage : @parameter%add_governor
                DUP;        # @storage : @storage : @parameter%add_governor
                DUG 2;      # @storage : @parameter%add_governor : @storage
                CAR;        # pair (address %admin) (set %governors address) : @parameter%add_governor : @storage
                CAR;        # address : @parameter%add_governor : @storage
                SENDER;     # @sender : address : @parameter%add_governor : @storage
                COMPARE;    # int : @parameter%add_governor : @storage
                EQ;         # bool : @parameter%add_governor : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : @parameter%add_governor : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%add_governor : @storage
                SWAP;       # @storage : @parameter%add_governor
                # self.data.governors.add(params) # @storage : @parameter%add_governor
                UNPAIR;     # pair (address %admin) (set %governors address) : pair (option %proposed_admin address) (set %whitelist address) : @parameter%add_governor
                UNPAIR;     # address : set address : pair (option %proposed_admin address) (set %whitelist address) : @parameter%add_governor
                SWAP;       # set address : address : pair (option %proposed_admin address) (set %whitelist address) : @parameter%add_governor
                PUSH bool True; # bool : set address : address : pair (option %proposed_admin address) (set %whitelist address) : @parameter%add_governor
                DIG 4;      # @parameter%add_governor : bool : set address : address : pair (option %proposed_admin address) (set %whitelist address)
                UPDATE;     # set address : address : pair (option %proposed_admin address) (set %whitelist address)
                SWAP;       # address : set address : pair (option %proposed_admin address) (set %whitelist address)
                PAIR;       # pair address (set address) : pair (option %proposed_admin address) (set %whitelist address)
                PAIR;       # pair (pair address (set address)) (pair (option %proposed_admin address) (set %whitelist address))
              }
              {
                SWAP;       # @storage : @parameter%propose_new_admin
                # == propose_new_admin ==
                # sp.verify(sp.sender == self.data.admin, 'NOT_ALLOWED') # @storage : @parameter%propose_new_admin
                DUP;        # @storage : @storage : @parameter%propose_new_admin
                DUG 2;      # @storage : @parameter%propose_new_admin : @storage
                CAR;        # pair (address %admin) (set %governors address) : @parameter%propose_new_admin : @storage
                CAR;        # address : @parameter%propose_new_admin : @storage
                SENDER;     # @sender : address : @parameter%propose_new_admin : @storage
                COMPARE;    # int : @parameter%propose_new_admin : @storage
                EQ;         # bool : @parameter%propose_new_admin : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : @parameter%propose_new_admin : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%propose_new_admin : @storage
                # self.data.proposed_admin = sp.some(params) # @parameter%propose_new_admin : @storage
                SOME;       # option address : @storage
                UPDATE 3;   # @storage
              }; # pair (pair address (set address)) (pair (option %proposed_admin address) (set %whitelist address))
          }; # pair (pair address (set address)) (pair (option %proposed_admin address) (set %whitelist address))
      }
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%remove_governor
            # == remove_governor ==
            # sp.verify(sp.sender == self.data.admin, 'NOT_ALLOWED') # @storage : @parameter%remove_governor
            DUP;        # @storage : @storage : @parameter%remove_governor
            DUG 2;      # @storage : @parameter%remove_governor : @storage
            CAR;        # pair (address %admin) (set %governors address) : @parameter%remove_governor : @storage
            CAR;        # address : @parameter%remove_governor : @storage
            SENDER;     # @sender : address : @parameter%remove_governor : @storage
            COMPARE;    # int : @parameter%remove_governor : @storage
            EQ;         # bool : @parameter%remove_governor : @storage
            IF
              {}
              {
                PUSH string "NOT_ALLOWED"; # string : @parameter%remove_governor : @storage
                FAILWITH;   # FAILED
              }; # @parameter%remove_governor : @storage
            SWAP;       # @storage : @parameter%remove_governor
            # self.data.governors.remove(params) # @storage : @parameter%remove_governor
            UNPAIR;     # pair (address %admin) (set %governors address) : pair (option %proposed_admin address) (set %whitelist address) : @parameter%remove_governor
            UNPAIR;     # address : set address : pair (option %proposed_admin address) (set %whitelist address) : @parameter%remove_governor
            SWAP;       # set address : address : pair (option %proposed_admin address) (set %whitelist address) : @parameter%remove_governor
            PUSH bool False; # bool : set address : address : pair (option %proposed_admin address) (set %whitelist address) : @parameter%remove_governor
            DIG 4;      # @parameter%remove_governor : bool : set address : address : pair (option %proposed_admin address) (set %whitelist address)
            UPDATE;     # set address : address : pair (option %proposed_admin address) (set %whitelist address)
            SWAP;       # address : set address : pair (option %proposed_admin address) (set %whitelist address)
            PAIR;       # pair address (set address) : pair (option %proposed_admin address) (set %whitelist address)
            PAIR;       # pair (pair address (set address)) (pair (option %proposed_admin address) (set %whitelist address))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%verify_whitelisted
                # == verify_whitelisted ==
                # sp.verify(self.data.whitelist.contains(params), 'ADDRESS_NOT_WHITELISTED') # @storage : @parameter%verify_whitelisted
                DUP;        # @storage : @storage : @parameter%verify_whitelisted
                DUG 2;      # @storage : @parameter%verify_whitelisted : @storage
                GET 4;      # set address : @parameter%verify_whitelisted : @storage
                SWAP;       # @parameter%verify_whitelisted : set address : @storage
                MEM;        # bool : @storage
                IF
                  {}
                  {
                    PUSH string "ADDRESS_NOT_WHITELISTED"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
              }
              {
                SWAP;       # @storage : @parameter%whitelist_addresses
                # == whitelist_addresses ==
                # sp.verify(self.data.governors.contains(sp.sender), 'NOT_ALLOWED') # @storage : @parameter%whitelist_addresses
                DUP;        # @storage : @storage : @parameter%whitelist_addresses
                DUG 2;      # @storage : @parameter%whitelist_addresses : @storage
                CAR;        # pair (address %admin) (set %governors address) : @parameter%whitelist_addresses : @storage
                CDR;        # set address : @parameter%whitelist_addresses : @storage
                SENDER;     # @sender : set address : @parameter%whitelist_addresses : @storage
                MEM;        # bool : @parameter%whitelist_addresses : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : @parameter%whitelist_addresses : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%whitelist_addresses : @storage
                # for addr in params: ... # @parameter%whitelist_addresses : @storage
                DUP;        # @parameter%whitelist_addresses : @parameter%whitelist_addresses : @storage
                ITER
                  {
                    # self.data.whitelist.add(addr) # address : @parameter%whitelist_addresses : @storage
                    DIG 2;      # @storage : address : @parameter%whitelist_addresses
                    DUP;        # @storage : @storage : address : @parameter%whitelist_addresses
                    GET 4;      # set address : @storage : address : @parameter%whitelist_addresses
                    PUSH bool True; # bool : set address : @storage : address : @parameter%whitelist_addresses
                    DIG 3;      # address : bool : set address : @storage : @parameter%whitelist_addresses
                    UPDATE;     # set address : @storage : @parameter%whitelist_addresses
                    UPDATE 4;   # @storage : @parameter%whitelist_addresses
                    SWAP;       # @parameter%whitelist_addresses : @storage
                  }; # @parameter%whitelist_addresses : @storage
                DROP;       # @storage
              }; # @storage
          }; # pair (pair address (set address)) (pair (option %proposed_admin address) (set %whitelist address))
      }; # pair (pair address (set address)) (pair (option %proposed_admin address) (set %whitelist address))
    NIL operation; # list operation : pair (pair address (set address)) (pair (option %proposed_admin address) (set %whitelist address))
    PAIR;       # pair (list operation) (pair (pair address (set address)) (pair (option %proposed_admin address) (set %whitelist address)))
  };